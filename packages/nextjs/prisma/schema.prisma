generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TransactionHistory {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  contractaddress String?
  timestamp       DateTime  @db.Timestamptz(6)
  type            String
  token           String
  amount          Float
  paymentmethod   String
  txhash          String    @db.VarChar(66)
  signature       String
  calldata        String?
  status          String
  chainstatus     Boolean
  useraddress     String
  queuedat        DateTime  @db.Timestamptz(6)
  processedat     DateTime?
  priority        Int
  retrycount      Int       @default(0)
  notes           String?
  xata_id         String    @unique(map: "TransactionHistory__pgroll_new_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version    Int       @default(0)
  xata_createdat  DateTime  @default(now()) @db.Timestamptz(6)
  xata_updatedat  DateTime  @default(now()) @db.Timestamptz(6)
  receipthash     String
  smartwallet     String
}

model Transfers {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  contractaddress String?
  sender          String
  recipient       String
  token           String
  amount          Float
  timestamp       DateTime  @db.Timestamptz(6)
  txhash          String    @db.VarChar(66)
  signature       String
  calldata        String?
  status          String
  chainstatus     Boolean
  queuedat        DateTime  @db.Timestamptz(6)
  processedat     DateTime?
  priority        Int
  retrycount      Int       @default(0)
  notes           String?
  xata_id         String    @unique(map: "Transfers__pgroll_new_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version    Int       @default(0)
  xata_createdat  DateTime  @default(now()) @db.Timestamptz(6)
  xata_updatedat  DateTime  @default(now()) @db.Timestamptz(6)
  receipthash     String
  smartwallet     String
}

model Purchases {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  contractaddress String?
  useraddress     String
  asset           String
  amount          Float
  quantity        Int
  paymentmethod   String
  timestamp       DateTime  @db.Timestamptz(6)
  txhash          String    @db.VarChar(66)
  signature       String
  calldata        String?
  status          String
  chainstatus     Boolean
  queuedat        DateTime  @db.Timestamptz(6)
  processedat     DateTime?
  priority        Int
  retrycount      Int       @default(0)
  notes           String?
  xata_id         String    @unique(map: "Purchases__pgroll_new_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version    Int       @default(0)
  xata_createdat  DateTime  @default(now()) @db.Timestamptz(6)
  xata_updatedat  DateTime  @default(now()) @db.Timestamptz(6)
  receipthash     String
  smartwallet     String
}

model Redemptions {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  contractaddress String?
  useraddress     String
  vaultid         String
  amount          Float
  paymentmethod   String
  timestamp       DateTime  @db.Timestamptz(6)
  txhash          String    @db.VarChar(66)
  signature       String
  calldata        String?
  status          String
  chainstatus     Boolean
  queuedat        DateTime  @db.Timestamptz(6)
  processedat     DateTime?
  priority        Int
  retrycount      Int       @default(0)
  notes           String?
  xata_id         String    @unique(map: "Redemptions__pgroll_new_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version    Int       @default(0)
  xata_createdat  DateTime  @default(now()) @db.Timestamptz(6)
  xata_updatedat  DateTime  @default(now()) @db.Timestamptz(6)
  receipthash     String
  smartwallet     String
}

model Vault {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  contractaddress  String?
  useraddress      String
  depositamount    Float
  paymentmethod    String
  depositstarttime DateTime  @db.Timestamptz(6)
  elapseddays      Int
  remainingdays    Int
  ispending        Boolean
  isclosed         Boolean
  txhash           String    @db.VarChar(66)
  signature        String
  calldata         String?
  status           String
  chainstatus      Boolean?
  timestamp        DateTime  @db.Timestamptz(6)
  queuedat         DateTime  @db.Timestamptz(6)
  processedat      DateTime?
  retrycount       Int       @default(0)
  notes            String?
  xata_id          String    @unique(map: "Vault__pgroll_new_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version     Int       @default(0)
  xata_createdat   DateTime  @default(now()) @db.Timestamptz(6)
  xata_updatedat   DateTime  @default(now()) @db.Timestamptz(6)
  receipthash      String
  smartwallet      String
}

model Swaps {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  contractaddress String?
  useraddress     String
  fromtoken       String
  totoken         String
  amountin        Float
  amountout       Float
  txhash          String    @db.VarChar(66)
  signature       String
  calldata        String?
  status          String
  chainstatus     Boolean
  timestamp       DateTime  @db.Timestamptz(6)
  queuedat        DateTime  @db.Timestamptz(6)
  processedat     DateTime?
  priority        Int
  retrycount      Int       @default(0)
  notes           String?
  xata_id         String    @unique(map: "Swaps__pgroll_new_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version    Int       @default(0)
  xata_createdat  DateTime  @default(now()) @db.Timestamptz(6)
  xata_updatedat  DateTime  @default(now()) @db.Timestamptz(6)
  smartwallet     String
}
